{
    "data-table": {
        "description": "DataTables support the display of structured data in rows and columns with an HTML table. To sort, filter or paginate the table, simply update the data passed in the items to the table and it will re-render itself appropriately. The table will throw a sort event as needed, and helper components for paging and filtering are coming soon.",
        "displayName": "DataTable",
        "methods": [
            {
                "name": "handleToggleAll",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "selected",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleRowToggle",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "item",
                        "type": null
                    },
                    {
                        "name": "selected",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleSort",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "sortColumn",
                        "type": null
                    }
                ],
                "returns": null
            }
        ],
        "props": {
            "bordered": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "A variant which adds borders to the table.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "children": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Provide children of the type `<DataTableColumn />` to define the structure of the data being represented and children of the type `<DataTableRowActions />` to define a menu which will be rendered for each item in the grid. Custom `<DataTableCell />` implementations may also be passed in to override cell rendering.\n```\n<DataTable>\n  <DataTableColumn />\n  <DataTableColumn>\n    <DataTableCustomCell />\n  </DataTableColumn>\n  <DataTableRowActions />\n</DataTable>\n```"
            },
            "className": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "array"
                        },
                        {
                            "name": "object"
                        },
                        {
                            "name": "string"
                        }
                    ]
                },
                "required": false,
                "description": "Class names to be added to the table."
            },
            "id": {
                "type": {
                    "name": "string"
                },
                "required": true,
                "description": "Every table must have a unique ID in order to support keyboard navigation and ARIA support."
            },
            "items": {
                "type": {
                    "name": "array"
                },
                "required": true,
                "description": "The collection of items to render in the table."
            },
            "onChange": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "This function fires when the selection of rows changes."
            },
            "onSort": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "This function fires when the table should be sorted."
            },
            "selection": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "The selected rows.",
                "defaultValue": {
                    "value": "[]",
                    "computed": false
                }
            },
            "selectRows": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "True if rows should be selectable.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "stacked": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "A variant which modifies table layout by stacking cells to accommodate smaller viewports. Should not be used at the same time as `stackedHorizontal`.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "stackedHorizontal": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "A variant which modifies table layout by displaying the header and row data side by side for smaller viewports. Should not be used at the same time as `stacked`.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "striped": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "A variant which adds stripes to alternating rows.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        }
    },
    "SLDSBreadCrumb": {
        "description": "",
        "displayName": "SLDSBreadCrumb",
        "methods": [],
        "props": {
            "assistiveText": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The assistive text for the breadcrumb trail"
            },
            "trail": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of react elements presumably anchor elements."
            }
        }
    },
    "SLDSButton": {
        "description": "The SLDSButton component is the Lightning Design System Button component. The SLDSButton should be used for label buttons, icon buttons, or buttons that have both labels and icons.\nEither a <code>label</code> or <code>assistiveText</code> is required; see the Prop Details table below.\nFor buttons that maintain selected/unselected states, use the <a href=\"#/button-stateful\">SLDSButtonStateful</a> component.",
        "displayName": "SLDSButton",
        "methods": [
            {
                "name": "handleClick",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getClassName",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "renderIcon",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "name",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "renderIconMore",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "renderLabel",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "assistiveText": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means.\nIf the button has an icon and a visible label, you can omit the <code>assistiveText</code> prop and use the <code>label</code> prop."
            },
            "disabled": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "hint": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Please reference <a href=\"http://www.lightningdesignsystem.com/components/buttons/#hint\">Lightning Design System Buttons > Hint</a>.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "iconName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Name of the icon. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to reference icon names."
            },
            "iconCategory": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"action\"",
                            "computed": false
                        },
                        {
                            "value": "\"custom\"",
                            "computed": false
                        },
                        {
                            "value": "\"doctype\"",
                            "computed": false
                        },
                        {
                            "value": "\"standard\"",
                            "computed": false
                        },
                        {
                            "value": "\"utility\"",
                            "computed": false
                        }
                    ]
                },
                "required": true,
                "description": "",
                "defaultValue": {
                    "value": "'utility'",
                    "computed": false
                }
            },
            "iconPosition": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"left\"",
                            "computed": false
                        },
                        {
                            "value": "\"right\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "If omitted, icon position is centered."
            },
            "iconSize": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"x-small\"",
                            "computed": false
                        },
                        {
                            "value": "\"small\"",
                            "computed": false
                        },
                        {
                            "value": "\"medium\"",
                            "computed": false
                        },
                        {
                            "value": "\"large\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"medium\"",
                    "computed": false
                }
            },
            "iconVariant": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"bare\"",
                            "computed": false
                        },
                        {
                            "value": "\"container\"",
                            "computed": false
                        },
                        {
                            "value": "\"border\"",
                            "computed": false
                        },
                        {
                            "value": "\"border-filled\"",
                            "computed": false
                        },
                        {
                            "value": "\"small\"",
                            "computed": false
                        },
                        {
                            "value": "\"more\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "For icon variants, please reference <a href=\"http://www.lightningdesignsystem.com/components/buttons/#icon\">Lightning Design System Icons</a>."
            },
            "label": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Visible label on the button. If the button is an icon button with no label, you must use the <code>assistiveText</code> prop."
            },
            "onClick": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "responsive": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, button scales to 100% width on small form factors.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "tabIndex": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Write <code>\"-1\"</code> if you don't want the user to tab to the button."
            },
            "tooltip": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": ""
            },
            "variant": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"base\"",
                            "computed": false
                        },
                        {
                            "value": "\"neutral\"",
                            "computed": false
                        },
                        {
                            "value": "\"brand\"",
                            "computed": false
                        },
                        {
                            "value": "\"destructive\"",
                            "computed": false
                        },
                        {
                            "value": "\"icon\"",
                            "computed": false
                        },
                        {
                            "value": "\"inverse\"",
                            "computed": false
                        },
                        {
                            "value": "\"icon-inverse\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Use <code>icon-inverse</code> for white icons.",
                "defaultValue": {
                    "value": "\"neutral\"",
                    "computed": false
                }
            }
        }
    },
    "SLDSButtonStateful": {
        "description": "The SLDSButtonStateful component is a variant of the Lightning Design System Button component. It is used for buttons that have a state of unselected or selected.\nFor icon buttons, use <code>variant=\"icon\"</code>. For buttons with labels or buttons with labels and icons, pass data to the state props (ie. <code>stateOne={{iconName: \"add\", label: \"Join\"}}</code>).",
        "displayName": "SLDSButtonStateful",
        "methods": [
            {
                "name": "handleClick",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getClassName",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "assistiveText": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means.\nIf the button has an icon and a visible label, you can omit the <code>assistiveText</code> prop and use the <code>label</code> prop."
            },
            "disabled": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "iconName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Name of the icon. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to reference icon names."
            },
            "iconSize": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"x-small\"",
                            "computed": false
                        },
                        {
                            "value": "\"small\"",
                            "computed": false
                        },
                        {
                            "value": "\"medium\"",
                            "computed": false
                        },
                        {
                            "value": "\"large\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"medium\"",
                    "computed": false
                }
            },
            "onClick": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "responsive": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, button scales to 100% width on small form factors",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "tabIndex": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Write <code>\"-1\"</code> if you don't want the user to tab to the button."
            },
            "stateOne": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Initial label and icon (optional) of button.",
                "defaultValue": {
                    "value": "{ iconName: \"add\", label: \"Follow\" }",
                    "computed": false
                }
            },
            "stateTwo": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Selected label and icon (optional) of button.",
                "defaultValue": {
                    "value": "{ iconName: \"check\", label: \"Following\" }",
                    "computed": false
                }
            },
            "stateThree": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Deselect label and icon (optional) of button.",
                "defaultValue": {
                    "value": "{ iconName: \"close\", label: \"Unfollow\" }",
                    "computed": false
                }
            },
            "tooltip": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": ""
            },
            "variant": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"base\"",
                            "computed": false
                        },
                        {
                            "value": "\"neutral\"",
                            "computed": false
                        },
                        {
                            "value": "\"brand\"",
                            "computed": false
                        },
                        {
                            "value": "\"destructive\"",
                            "computed": false
                        },
                        {
                            "value": "\"icon\"",
                            "computed": false
                        },
                        {
                            "value": "\"inverse\"",
                            "computed": false
                        },
                        {
                            "value": "\"icon-inverse\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Use <code>icon-inverse</code> for white icons."
            }
        }
    },
    "SLDSButtonGroup": {
        "description": "The SLDSButtonGroup component wraps other SLDS components (ie. SLDSButton, SLDSMenuDropdown, SLDSPopoverTooltip, etc).",
        "displayName": "SLDSButtonGroup",
        "methods": [],
        "props": {
            "children": {
                "type": {
                    "name": "node"
                },
                "required": true,
                "description": "Children are expected to be components. If last button triggers a dropdown menu, use SLDSDropdown instead of SLDSButton."
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "SLDSIcon": {
        "description": "The SLDSIcon component is the Lightning Design System Icon component and should be used for naked icons. For icons that are buttons, use the <a href=\"#/button\">SLDSButton component</a> component with <code>variant=\"icon\"</code>.",
        "displayName": "SLDSIcon",
        "methods": [
            {
                "name": "getContainerClassName",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getClassName",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "assistiveText": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means.\nNaked icons must have assistive text, however, if you also have visible descriptive text with the icon,\ndeclare this prop as <code>assistiveText=\"\"</code>."
            },
            "category": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"action\"",
                            "computed": false
                        },
                        {
                            "value": "\"custom\"",
                            "computed": false
                        },
                        {
                            "value": "\"doctype\"",
                            "computed": false
                        },
                        {
                            "value": "\"standard\"",
                            "computed": false
                        },
                        {
                            "value": "\"utility\"",
                            "computed": false
                        }
                    ]
                },
                "required": true,
                "description": "",
                "defaultValue": {
                    "value": "'standard'",
                    "computed": false
                }
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "CSS classes that are applied to the SVG"
            },
            "inverse": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, icon color is white. If false, icon color is the default text color.",
                "defaultValue": {
                    "value": "true",
                    "computed": false
                }
            },
            "name": {
                "type": {
                    "name": "string"
                },
                "required": true,
                "description": "Name of the icon. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to reference icon names."
            },
            "size": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"x-small\"",
                            "computed": false
                        },
                        {
                            "value": "\"small\"",
                            "computed": false
                        },
                        {
                            "value": "\"medium\"",
                            "computed": false
                        },
                        {
                            "value": "\"large\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "'medium'",
                    "computed": false
                }
            }
        }
    },
    "SLDSLookup": {
        "description": "The SLDSLookup is the Lightning Design System Lookup base component.",
        "displayName": "SLDSLookup",
        "methods": [
            {
                "name": "modifyItems",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "itemsToModify",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "increaseIndex",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "decreaseIndex",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "setFocus",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "id",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getListLength",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "qty",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getNumFocusableItems",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "selectItem",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "itemId",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "selectItemByIndex",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "index",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleDeleteSelected",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleClose",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleEscape",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleCancel",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleClick",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleBlur",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleFocus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleChange",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleKeyDown",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handlePillKeyDown",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getHeader",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getFooter",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "normalizeSearchTerm",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "string",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "renderMenuContent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "renderSimpleMenu",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "renderModalMenu",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "renderSelectedItem",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "inputRefName",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "focusInput",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "isSelected",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getClassName",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "emptyMessage": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Custom message that renders when no matches found. The default empty state is just text that says, \"No matches found.\"."
            },
            "filterWith": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Custom function to filter the Lookup items when typing into input field. The default function is case-insensitive and uses the searchTerm to filter Lookup items on their labels.",
                "defaultValue": {
                    "value": "(term, item) => {\n  if(!term) return true;\n  return item.label.match(new RegExp(escapeRegExp(term), \"ig\"));\n}",
                    "computed": false
                }
            },
            "footerRenderer": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Custom component for Lookup footer. The default footer allows user to add new item - see <a href=\"http://www.lightningdesignsystem.com/components/lookups/#base\">Lightning Design System Lookup > Base</a>. To use the default footer, pass in <code>SLDSLookup.DefaultFooter</code>."
            },
            "headerRenderer": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Custom component for Lookup header. The default header has a search icon and shows the search term - see <a href=\"http://www.lightningdesignsystem.com/components/lookups/#base\">Lightning Design System Lookup > Base</a>. To use the default header, pass in <code>SLDSLookup.DefaultHeader</code>."
            },
            "iconCategory": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Please refer to <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to view categories."
            },
            "iconInverse": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, icon color is white. If false, icon color is the default text color."
            },
            "iconName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Name of icon. Please refer to <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to view icon names."
            },
            "label": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "listItemLabelRenderer": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Custom component that overrides the default Lookup Item component."
            },
            "modal": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, component renders specifically to work inside Modal.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "constrainToScrollParent": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, constrains the menu to the scroll parent. Has no effect if modal is false.",
                "defaultValue": {
                    "value": "true",
                    "computed": false
                }
            },
            "flippable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, the menu is constrained to the window and may be flipped up. Has no effect if modal is false.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "onBlur": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "onChange": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "onSelect": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "onUnselect": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "options": {
                "type": {
                    "name": "array"
                },
                "required": true,
                "description": "Lookup item data."
            },
            "required": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, adds asterisk next to input label to indicate it is a required field.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "searchTerm": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "selectedItem": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "Index of current selected item."
            }
        }
    },
    "SLDSMenuDropdown": {
        "description": "The SLDSMenuDropdown component is a variant of the Ligtning Design System Menu component.",
        "displayName": "SLDSMenuDropdown",
        "methods": [
            {
                "name": "getIndexByValue",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "value",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getValueByIndex",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "index",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getListItemRenderer",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleSelect",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "index",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleClose",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleMouseEnter",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleMouseLeave",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleClick",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleMouseDown",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleBlur",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "e",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleFocus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "setFocus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getButtonNode",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleKeyDown",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleUpdateHighlighted",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "nextIndex",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleListBlur",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleListItemBlur",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "index",
                        "type": null
                    },
                    {
                        "name": "relatedTarget",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleCancel",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getPopoverContent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getSimplePopover",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getModalPopover",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "align": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"left\"",
                            "computed": false
                        },
                        {
                            "value": "\"right\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"left\"",
                    "computed": false
                }
            },
            "assistiveText": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means.\nIf the Dropdown button has an icon and a visible label, you can omit the <code>assistiveText</code> prop and use the <code>label</code> prop."
            },
            "buttonVariant": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"base\"",
                            "computed": false
                        },
                        {
                            "value": "\"neutral\"",
                            "computed": false
                        },
                        {
                            "value": "\"brand\"",
                            "computed": false
                        },
                        {
                            "value": "\"destructive\"",
                            "computed": false
                        },
                        {
                            "value": "\"icon\"",
                            "computed": false
                        },
                        {
                            "value": "\"inverse\"",
                            "computed": false
                        },
                        {
                            "value": "\"icon-inverse\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Determines variant of the Button component that triggers dropdown.",
                "defaultValue": {
                    "value": "\"neutral\"",
                    "computed": false
                }
            },
            "checkmark": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, renders checkmark icon on the selected Menu Item.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "disabled": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "hoverCloseDelay": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "Delay on menu closing.",
                "defaultValue": {
                    "value": "300",
                    "computed": false
                }
            },
            "label": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "listItemRenderer": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Custom element that overrides the default Menu Item component."
            },
            "modal": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, component renders specifically to work inside Modal.",
                "defaultValue": {
                    "value": "true",
                    "computed": false
                }
            },
            "onClick": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "onSelect": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "openOn": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"hover\"",
                            "computed": false
                        },
                        {
                            "value": "\"click\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"click\"",
                    "computed": false
                }
            },
            "options": {
                "type": {
                    "name": "array"
                },
                "required": true,
                "description": "Menu item data."
            },
            "value": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Current selected menu item."
            },
            "tooltip": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "SLDSMenuPicklist": {
        "description": "The SLDSMenuPicklist component is a variant of the Ligtning Design System Menu component.",
        "displayName": "SLDSMenuPicklist",
        "methods": [
            {
                "name": "getIndexByValue",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "value",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getValueByIndex",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "index",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleSelect",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "index",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleValueUpdate",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "index",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleClose",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleClick",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleMouseDown",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleBlur",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "e",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleFocus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "setFocus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleKeyDown",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleUpdateHighlighted",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "nextIndex",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleListBlur",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleCancel",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getListItemRenderer",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getPopoverContent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getSimplePopover",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getModalPopover",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getPlaceholder",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleListItemBlur",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "index",
                        "type": null
                    },
                    {
                        "name": "relatedTarget",
                        "type": null
                    }
                ],
                "returns": null
            }
        ],
        "props": {
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "checkmark": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, renders checkmark icon on the selected Menu Item.",
                "defaultValue": {
                    "value": "true",
                    "computed": false
                }
            },
            "disabled": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "label": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "listItemRenderer": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Custom element that overrides the default Menu Item component."
            },
            "modal": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, component renders specifically to work inside Modal.",
                "defaultValue": {
                    "value": "true",
                    "computed": false
                }
            },
            "onClick": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "onSelect": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "options": {
                "type": {
                    "name": "array"
                },
                "required": true,
                "description": "Menu item data."
            },
            "placeholder": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"Select an Option\"",
                    "computed": false
                }
            },
            "required": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "value": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Current selected item."
            }
        }
    },
    "SLDSModal": {
        "description": "The SLDSModal component is used for the Lightning Design System Modal and Notification > Prompt components. The Modal opens from a state change outside of the component itself (pass this state to the <code>isOpen</code> prop).\nFor more details on the Prompt markup, please review the <a href=\"http://www.lightningdesignsystem.com/components/notifications#prompt\">Notifications > Prompt</a>.",
        "displayName": "SLDSModal",
        "methods": [
            {
                "name": "closeModal",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleSubmitModal",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "updateBodyScroll",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "clearBodyScroll",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleModalClick",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "isPrompt",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "footerComponent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "headerComponent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getModal",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "align": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"top\"",
                            "computed": false
                        },
                        {
                            "value": "\"center\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Vertical alignment of Modal.",
                "defaultValue": {
                    "value": "\"center\"",
                    "computed": false
                }
            },
            "children": {
                "type": {
                    "name": "node"
                },
                "required": true,
                "description": "Modal content."
            },
            "directional": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, modal footer buttons render left and right. An example use case would be for \"back\" and \"next\" buttons.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "dismissible": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, prompt Modals can be dismissed by clicking outside of modal or pressing esc key.",
                "defaultValue": {
                    "value": "true",
                    "computed": false
                }
            },
            "footer": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "Array of buttons to be placed in the footer. They render on the right side by default but are floated left and right if <code>directional</code> is true."
            },
            "isOpen": {
                "type": {
                    "name": "bool"
                },
                "required": true,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "prompt": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"success\"",
                            "computed": false
                        },
                        {
                            "value": "\"warning\"",
                            "computed": false
                        },
                        {
                            "value": "\"error\"",
                            "computed": false
                        },
                        {
                            "value": "\"wrench\"",
                            "computed": false
                        },
                        {
                            "value": "\"offline\"",
                            "computed": false
                        },
                        {
                            "value": "\"info\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "size": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"medium\"",
                            "computed": false
                        },
                        {
                            "value": "\"large\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "tagline": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Content underneath the title."
            },
            "title": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "SLDSNotification": {
        "description": "The SLDSNotification component is the Alert and Toast variants of the Lightning Design System Notification component. For prompt notifications, use the <a href=\"#/modal\">SLDSModal</a> component with <code>prompt={true}</code>.\nThe Notification opens from a state change outside of the component itself (pass this state to the <code>isOpen</code> prop).",
        "displayName": "SLDSNotification",
        "methods": [
            {
                "name": "renderIcon",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "renderClose",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "onDismiss",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "renderAlertContent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "renderToastContent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getClassName",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "renderContent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "blankContent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Custom classes applied to Notification element."
            },
            "content": {
                "type": {
                    "name": "node"
                },
                "required": true,
                "description": "Message for Notification."
            },
            "dismissible": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, close button appears for users to dismiss Notification.",
                "defaultValue": {
                    "value": "true",
                    "computed": false
                }
            },
            "duration": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "If duration exists, the Notification will disappear after that amount of time."
            },
            "iconName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Name of the icon. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lighning Design System Icons</a> to reference icon names."
            },
            "isOpen": {
                "type": {
                    "name": "bool"
                },
                "required": true,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "onDismiss": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "texture": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Styling for Notification background.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "theme": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"success\"",
                            "computed": false
                        },
                        {
                            "value": "\"warning\"",
                            "computed": false
                        },
                        {
                            "value": "\"error\"",
                            "computed": false
                        },
                        {
                            "value": "\"offline\"",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Styling for Notification background color. Please reference <a href=\"http://www.lightningdesignsystem.com/components/utilities/themes/#color\">Lighning Design System Themes > Color</a>."
            },
            "variant": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"alert\"",
                            "computed": false
                        },
                        {
                            "value": "\"toast\"",
                            "computed": false
                        }
                    ]
                },
                "required": true,
                "description": ""
            }
        }
    },
    "SLDSPageHeader": {
        "description": "The SLDSPageHeader component adds SLDSPageHeader, SLDSPageHeader.Info, SLDSPageHeader.Title, SLDSPageHeader.DetailRow, and SLDSPageHeader.DetailBlock.",
        "displayName": "SLDSPageHeader",
        "methods": [
            {
                "name": "_getClassNames",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "className",
                        "type": null
                    }
                ],
                "returns": null
            }
        ],
        "props": {
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optional class name",
                "defaultValue": {
                    "value": "''",
                    "computed": false
                }
            },
            "variant": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The type of component",
                "defaultValue": {
                    "value": "'base'",
                    "computed": false
                }
            },
            "label": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "string"
                        },
                        {
                            "name": "element"
                        }
                    ]
                },
                "required": false,
                "description": "The info property can be a string or a React element"
            },
            "title": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "string"
                        },
                        {
                            "name": "element"
                        }
                    ]
                },
                "required": false,
                "description": "The title property can be a string or a React element"
            },
            "info": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "string"
                        },
                        {
                            "name": "element"
                        }
                    ]
                },
                "required": false,
                "description": "The info property can be a string or a React element"
            },
            "icon": {
                "type": {
                    "name": "element"
                },
                "required": false,
                "description": "The page header icon"
            },
            "iconName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Name of the icon. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to reference icon names."
            },
            "iconCategory": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'action'",
                            "computed": false
                        },
                        {
                            "value": "'custom'",
                            "computed": false
                        },
                        {
                            "value": "'doctype'",
                            "computed": false
                        },
                        {
                            "value": "'standard'",
                            "computed": false
                        },
                        {
                            "value": "'utility'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "The icons category"
            },
            "iconPosition": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'left'",
                            "computed": false
                        },
                        {
                            "value": "'right'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "If omitted, icon position is centered."
            },
            "iconSize": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'x-small'",
                            "computed": false
                        },
                        {
                            "value": "'small'",
                            "computed": false
                        },
                        {
                            "value": "'medium'",
                            "computed": false
                        },
                        {
                            "value": "'large'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "iconVariant": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'bare'",
                            "computed": false
                        },
                        {
                            "value": "'container'",
                            "computed": false
                        },
                        {
                            "value": "'border'",
                            "computed": false
                        },
                        {
                            "value": "'border-filled'",
                            "computed": false
                        },
                        {
                            "value": "'small'",
                            "computed": false
                        },
                        {
                            "value": "'more'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "For icon variants, please reference <a href='http://www.lightningdesignsystem.com/components/buttons/#icon'>Lightning Design System Icons</a>."
            },
            "contentRight": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "string"
                        },
                        {
                            "name": "element"
                        }
                    ]
                },
                "required": false,
                "description": "Content to appear on the right hand side of the page header",
                "defaultValue": {
                    "value": "''",
                    "computed": false
                }
            },
            "details": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of buttons which appear on the component's right hand side.",
                "defaultValue": {
                    "value": "[]",
                    "computed": false
                }
            },
            "navRight": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "string"
                        },
                        {
                            "name": "element"
                        }
                    ]
                },
                "required": false,
                "description": "Nav content which appears in the upper right hand corner.",
                "defaultValue": {
                    "value": "''",
                    "computed": false
                }
            },
            "trail": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of react elements presumably anchor <a> elements.",
                "defaultValue": {
                    "value": "[]",
                    "computed": false
                }
            }
        }
    },
    "SLDSPopoverTooltip": {
        "description": "The SLDSPopoverTooltip component is variant of the Lightning Design System Popover component. This component wraps an element that triggers it to open. It must be a focusable child element (either a button or anchor) so that keyboard users can navigate to it.",
        "displayName": "SLDSPopoverTooltip",
        "methods": [
            {
                "name": "getTooltipTarget",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getTriggerId",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleMouseEnter",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleMouseLeave",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getTooltipContent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleCancel",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getTooltip",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "renderAssistantText",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "decorateGrandKidsWithKeyToSilenceWarning",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "grandKids",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "grandKidsWithAsstText",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "child",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getContent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "align": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "\"top\"",
                            "computed": false
                        },
                        {
                            "value": "\"top left\"",
                            "computed": false
                        },
                        {
                            "value": "\"top right\"",
                            "computed": false
                        },
                        {
                            "value": "\"right\"",
                            "computed": false
                        },
                        {
                            "value": "\"right top\"",
                            "computed": false
                        },
                        {
                            "value": "\"right bottom\"",
                            "computed": false
                        },
                        {
                            "value": "\"bottom\"",
                            "computed": false
                        },
                        {
                            "value": "\"bottom left\"",
                            "computed": false
                        },
                        {
                            "value": "\"bottom right\"",
                            "computed": false
                        },
                        {
                            "value": "\"left\"",
                            "computed": false
                        },
                        {
                            "value": "\"left top\"",
                            "computed": false
                        },
                        {
                            "value": "\"left bottom\"",
                            "computed": false
                        }
                    ]
                },
                "required": true,
                "description": "Alignment of the Tooltip relative to the element that triggers it.",
                "defaultValue": {
                    "value": "\"top\"",
                    "computed": false
                }
            },
            "children": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Pass the element that triggers Tooltip as a child of the Tooltip component. It must be either an anchor or button so keyboard users can tab to it."
            },
            "content": {
                "type": {
                    "name": "node"
                },
                "required": true,
                "description": "Content inside Tooltip.",
                "defaultValue": {
                    "value": "<span>Tooltip</span>",
                    "computed": false
                }
            },
            "hoverCloseDelay": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "Delay on Tooltip closing.",
                "defaultValue": {
                    "value": "50",
                    "computed": false
                }
            },
            "openByDefault": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        }
    },
    "SLDSDatepickerSingleSelect": {
        "description": "",
        "displayName": "SLDSDatepickerSingleSelect",
        "methods": [
            {
                "name": "handleChange",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "date",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleClose",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleClick",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleFocus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleBlur",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "setFocus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "parseDate",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "strValue",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "popover",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleInputChange",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleKeyDown",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getInputIcon",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "inputRefName",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "abbrWeekDayLabels": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "['S','M','T','W','T','F','S']",
                    "computed": false
                }
            },
            "formatter": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Date formatting function",
                "defaultValue": {
                    "value": "function(date) {\n  if(date){\n    return (date.getMonth()+1) +\n      '/'+date.getDate() +\n      '/'+date.getFullYear();\n  }\n}",
                    "computed": false
                }
            },
            "monthLabels": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "[\n  'January','February','March',\n  'April','May','June','July',\n  'August','September','October',\n  'November','December'\n]",
                    "computed": false
                }
            },
            "parser": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Parsing date string into Date",
                "defaultValue": {
                    "value": "function(str) {\n  return new Date(str);\n}",
                    "computed": false
                }
            },
            "relativeYearFrom": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "-5",
                    "computed": false
                }
            },
            "relativeYearTo": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "5",
                    "computed": false
                }
            },
            "required": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If true, adds asterisk next to input label to indicate it is a required field.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "strValue": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "todayLabel": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "'Today'",
                    "computed": false
                }
            },
            "value": {
                "type": {
                    "name": "instanceOf",
                    "value": "Date"
                },
                "required": false,
                "description": "Date",
                "defaultValue": {
                    "value": "null",
                    "computed": false
                }
            },
            "weekDayLabels": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "[\n  'Sunday','Monday','Tuesday',\n  'Wednesday','Thursday','Friday',\n  'Saturday'\n]",
                    "computed": false
                }
            },
            "onDateChange": {
                "defaultValue": {
                    "value": "function(date, strValue) {\n  console.log('onDateChange should be defined');\n}",
                    "computed": false
                }
            },
            "placeholder": {
                "defaultValue": {
                    "value": "'Pick a Date'",
                    "computed": false
                }
            }
        }
    },
    "SLDSTimepicker": {
        "description": "",
        "displayName": "SLDSTimepicker",
        "methods": [
            {
                "name": "handleChange",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "date",
                        "type": null
                    },
                    {
                        "name": "strValue",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleClose",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleClick",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleFocus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleBlur",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "setFocus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "parseDate",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "strValue",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getOptions",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getListItemRenderer",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getValueByIndex",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "index",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleSelect",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "index",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "handleCancel",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getPopoverContent",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getSimplePopover",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "getModalPopover",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleInputChange",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "handleKeyDown",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "getInputIcon",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "formatter": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Time formatting function",
                "defaultValue": {
                    "value": "function(date) {\n  if(date){\n    return date.toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'});\n  }\n}",
                    "computed": false
                }
            },
            "parser": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Parsing date string into Date",
                "defaultValue": {
                    "value": "function(timeStr) {\n  const date = new Date();\n  const dateStr = date.toLocaleString(navigator.language, {year: 'numeric', month: 'numeric', day: 'numeric'});\n  return new Date(dateStr+' '+timeStr);\n}",
                    "computed": false
                }
            },
            "value": {
                "type": {
                    "name": "instanceOf",
                    "value": "Date"
                },
                "required": false,
                "description": "Date",
                "defaultValue": {
                    "value": "null",
                    "computed": false
                }
            },
            "stepInMinutes": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "30",
                    "computed": false
                }
            },
            "strValue": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "onDateChange": {
                "defaultValue": {
                    "value": "function(date, strValue) {\n  console.log('onDateChange should be defined');\n}",
                    "computed": false
                }
            },
            "placeholder": {
                "defaultValue": {
                    "value": "'Pick Time'",
                    "computed": false
                }
            }
        }
    }
}